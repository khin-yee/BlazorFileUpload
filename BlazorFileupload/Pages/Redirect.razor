@page "/Redirect"
@inject IConfiguration config;
@using BlazorFileupload.Data;
@using UploadFilesLibrary;
@inject ISqlDataAccess sql;
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Components.Forms;
<PageTitle>File Upload DemoApp</PageTitle>


<h1>File Upload</h1>
<EditForm Model="newCustomer" OnValidSubmit="SubmitForm">
    <div>
        <label for="firstName">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value="newCustomer.FirstName" />
    </div>
    <div>
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="newCustomer.LastName" />
    </div>
    <div>
        <label for="profilePicture">Profile Picture:</label>
        <InputFile OnChange="@LoadFiles" class="form-control" multiple accept=".png,.jpg" />
    </div>
    <div>
        <label for="lastName">User Name:</label>
        <InputText id="UserName" class="form-control" @bind-Value="newCustomer.UserName" />
    </div>
    <button class="btn btn-primary mt-3" type="submit">Create Customer</button>
</EditForm>
<br />
@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}
@if (customers is not null)
{
    <h2>Existing Customers</h2>
    <table class="table table-bordered">
        <thead>
            <tr>
                <td>Id</td>
                <td>FirstName</td>
                <td>LastName</td>
                <td>FileName</td>
                <td>UserName</td>
                <td>Action</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var cus in customers)
            {
                <tr>
                    <td>@cus.Id</td>
                    <td>@cus.FirstName</td>
                    <td>@cus.LastName</td>
                    <td>
                        @if (string.IsNullOrEmpty(cus.FileName) == false)
                        {
                            <img src="@CreateFullPath(cus.FileName)" width="50" />
                        }
                    </td>
                    <td>@cus.UserName</td>
                    <td>
                        <button class="btn btn-outline-success" @onclick="() => DeleteFile(cus.Id)">Delete</button>
                        <button class="btn btn-outline-success">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private long maxFileSize = 1024 * 1024 * 3;//3MB
    private List<string> errors = new();
    private CustomerModel newCustomer = new();
    private IBrowserFile? file;
    private List<CustomerModel>? customers;
    private async Task LoadCustomers()
    {
        customers = await sql.LoadData<CustomerModel>("dbo.spCustomer_GetAll", "Default", null);
    }
    private string CreateFullPath(string relativepath)
    {
        var tspath = Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativepath);
        return tspath;
    }
    private async Task DeleteFile(int id)
    {
        try
        {
            await sql.DeleteData("dbo.spCustomer_Delete", "Default",id);
            NavManager.NavigateTo("/");
        }
        catch(Exception ex)
        {
            errors.Add($"Error:{ex.Message}");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }
    private async Task SubmitForm()
    {
        try
        {
            string relativePath = await CaptureFile();
            newCustomer.FileName = relativePath;
            await sql.SaveData("dbo.Customer_Insert", "Default", newCustomer);

            newCustomer = new();
            file = null;
            errors.Clear();
            NavManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errors.Add($"Error:{ex.Message}");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }
    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }
        try
        {
            string newFileName = Path.ChangeExtension(
            Path.GetRandomFileName(),
            Path.GetExtension(file.Name));
            var path = Path.Combine(config.GetValue<string>("FileStorage")!, "BlazorTestFile", newFileName);
            string relativePath = newFileName;
            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "BlazorTestFile"));
            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"File:{file.Name}Error:{ex.Message}");
            throw ex;
        }


    }
}